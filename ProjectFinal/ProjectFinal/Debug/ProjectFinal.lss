
ProjectFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00001578  0000160c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800192  00800192  0000169e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ff  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091a  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e8  00000000  00000000  000032f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d3  00000000  00000000  000049f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000649  00000000  00000000  000053c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	a8 c1       	rjmp	.+848    	; 0x386 <__vector_13>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e7       	ldi	r30, 0x78	; 120
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 39       	cpi	r26, 0x92	; 146
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e9       	ldi	r26, 0x92	; 146
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3c       	cpi	r26, 0xCB	; 203
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 47 0a 	call	0x148e	; 0x148e <main>
      c6:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	1a d0       	rcall	.+52     	; 0x10c <LCD_WriteCommand>
      d8:	00 00       	nop
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <LCD_init>:
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	84 e6       	ldi	r24, 0x64	; 100
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	ac d0       	rcall	.+344    	; 0x246 <delay_ms>
      ee:	88 e3       	ldi	r24, 0x38	; 56
      f0:	0d d0       	rcall	.+26     	; 0x10c <LCD_WriteCommand>
      f2:	86 e0       	ldi	r24, 0x06	; 6
      f4:	0b d0       	rcall	.+22     	; 0x10c <LCD_WriteCommand>
      f6:	8f e0       	ldi	r24, 0x0F	; 15
      f8:	09 d0       	rcall	.+18     	; 0x10c <LCD_WriteCommand>
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	07 d0       	rcall	.+14     	; 0x10c <LCD_WriteCommand>
      fe:	8a e0       	ldi	r24, 0x0A	; 10
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	a1 d0       	rcall	.+322    	; 0x246 <delay_ms>
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <LCD_WriteCommand>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	8b e2       	ldi	r24, 0x2B	; 43
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	2b e2       	ldi	r18, 0x2B	; 43
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	2f 7b       	andi	r18, 0xBF	; 191
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
     12a:	88 e2       	ldi	r24, 0x28	; 40
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	29 81       	ldd	r18, Y+1	; 0x01
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
     134:	8b e2       	ldi	r24, 0x2B	; 43
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	2b e2       	ldi	r18, 0x2B	; 43
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	20 68       	ori	r18, 0x80	; 128
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
     146:	00 00       	nop
     148:	8b e2       	ldi	r24, 0x2B	; 43
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	2b e2       	ldi	r18, 0x2B	; 43
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	2f 77       	andi	r18, 0x7F	; 127
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	73 d0       	rcall	.+230    	; 0x246 <delay_ms>
     160:	00 00       	nop
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <LCD_WriteData>:
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	1f 92       	push	r1
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	8b e2       	ldi	r24, 0x2B	; 43
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	2b e2       	ldi	r18, 0x2B	; 43
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	20 64       	ori	r18, 0x40	; 64
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
     188:	88 e2       	ldi	r24, 0x28	; 40
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	fc 01       	movw	r30, r24
     190:	20 83       	st	Z, r18
     192:	8b e2       	ldi	r24, 0x2B	; 43
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	2b e2       	ldi	r18, 0x2B	; 43
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	f9 01       	movw	r30, r18
     19c:	20 81       	ld	r18, Z
     19e:	20 68       	ori	r18, 0x80	; 128
     1a0:	fc 01       	movw	r30, r24
     1a2:	20 83       	st	Z, r18
     1a4:	00 00       	nop
     1a6:	8b e2       	ldi	r24, 0x2B	; 43
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	2b e2       	ldi	r18, 0x2B	; 43
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	f9 01       	movw	r30, r18
     1b0:	20 81       	ld	r18, Z
     1b2:	2f 77       	andi	r18, 0x7F	; 127
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	44 d0       	rcall	.+136    	; 0x246 <delay_ms>
     1be:	00 00       	nop
     1c0:	0f 90       	pop	r0
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <LCD_DisplayString>:
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <LCD_DisplayString+0x6>
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <LCD_DisplayString+0x8>
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	8a 83       	std	Y+2, r24	; 0x02
     1d6:	7c 83       	std	Y+4, r23	; 0x04
     1d8:	6b 83       	std	Y+3, r22	; 0x03
     1da:	78 df       	rcall	.-272    	; 0xcc <LCD_ClearScreen>
     1dc:	8a 81       	ldd	r24, Y+2	; 0x02
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	0f c0       	rjmp	.+30     	; 0x200 <LCD_DisplayString+0x38>
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	98 0f       	add	r25, r24
     1e8:	99 83       	std	Y+1, r25	; 0x01
     1ea:	18 d0       	rcall	.+48     	; 0x21c <LCD_Cursor>
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	9c 01       	movw	r18, r24
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	3f 4f       	sbci	r19, 0xFF	; 255
     1f6:	3c 83       	std	Y+4, r19	; 0x04
     1f8:	2b 83       	std	Y+3, r18	; 0x03
     1fa:	fc 01       	movw	r30, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	b5 df       	rcall	.-150    	; 0x16a <LCD_WriteData>
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	9c 81       	ldd	r25, Y+4	; 0x04
     204:	fc 01       	movw	r30, r24
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	59 f7       	brne	.-42     	; 0x1e2 <LCD_DisplayString+0x1a>
     20c:	00 00       	nop
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <LCD_Cursor>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	89 83       	std	Y+1, r24	; 0x01
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	81 31       	cpi	r24, 0x11	; 17
     22c:	20 f4       	brcc	.+8      	; 0x236 <LCD_Cursor+0x1a>
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	81 58       	subi	r24, 0x81	; 129
     232:	6c df       	rcall	.-296    	; 0x10c <LCD_WriteCommand>
     234:	03 c0       	rjmp	.+6      	; 0x23c <LCD_Cursor+0x20>
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	81 55       	subi	r24, 0x51	; 81
     23a:	68 df       	rcall	.-304    	; 0x10c <LCD_WriteCommand>
     23c:	00 00       	nop
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <delay_ms>:
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <delay_ms+0x8>
     24e:	00 d0       	rcall	.+0      	; 0x250 <delay_ms+0xa>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	9e 83       	std	Y+6, r25	; 0x06
     256:	8d 83       	std	Y+5, r24	; 0x05
     258:	1a 82       	std	Y+2, r1	; 0x02
     25a:	19 82       	std	Y+1, r1	; 0x01
     25c:	13 c0       	rjmp	.+38     	; 0x284 <delay_ms+0x3e>
     25e:	1c 82       	std	Y+4, r1	; 0x04
     260:	1b 82       	std	Y+3, r1	; 0x03
     262:	06 c0       	rjmp	.+12     	; 0x270 <delay_ms+0x2a>
     264:	00 00       	nop
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	9c 81       	ldd	r25, Y+4	; 0x04
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	9c 83       	std	Y+4, r25	; 0x04
     26e:	8b 83       	std	Y+3, r24	; 0x03
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	9c 81       	ldd	r25, Y+4	; 0x04
     274:	87 30       	cpi	r24, 0x07	; 7
     276:	93 40       	sbci	r25, 0x03	; 3
     278:	ac f3       	brlt	.-22     	; 0x264 <delay_ms+0x1e>
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	9a 81       	ldd	r25, Y+2	; 0x02
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	29 81       	ldd	r18, Y+1	; 0x01
     286:	3a 81       	ldd	r19, Y+2	; 0x02
     288:	8d 81       	ldd	r24, Y+5	; 0x05
     28a:	9e 81       	ldd	r25, Y+6	; 0x06
     28c:	28 17       	cp	r18, r24
     28e:	39 07       	cpc	r19, r25
     290:	34 f3       	brlt	.-52     	; 0x25e <delay_ms+0x18>
     292:	00 00       	nop
     294:	26 96       	adiw	r28, 0x06	; 6
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <TimerSet>:
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <TimerSet+0x6>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <TimerSet+0x8>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	69 83       	std	Y+1, r22	; 0x01
     2b4:	7a 83       	std	Y+2, r23	; 0x02
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	ab 81       	ldd	r26, Y+3	; 0x03
     2c0:	bc 81       	ldd	r27, Y+4	; 0x04
     2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     2ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2da:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     2de:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     2e2:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_avr_timer_cntcurr>
     2e6:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_avr_timer_cntcurr+0x1>
     2ea:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_avr_timer_cntcurr+0x2>
     2ee:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_avr_timer_cntcurr+0x3>
     2f2:	00 00       	nop
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <TimerOn>:
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	81 e8       	ldi	r24, 0x81	; 129
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	2b e0       	ldi	r18, 0x0B	; 11
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
     314:	88 e8       	ldi	r24, 0x88	; 136
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	31 83       	std	Z+1, r19	; 0x01
     320:	20 83       	st	Z, r18
     322:	8f e6       	ldi	r24, 0x6F	; 111
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
     32c:	84 e8       	ldi	r24, 0x84	; 132
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
     336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     33a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     33e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     342:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     346:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_avr_timer_cntcurr>
     34a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_avr_timer_cntcurr+0x1>
     34e:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_avr_timer_cntcurr+0x2>
     352:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_avr_timer_cntcurr+0x3>
     356:	8f e5       	ldi	r24, 0x5F	; 95
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2f e5       	ldi	r18, 0x5F	; 95
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	f9 01       	movw	r30, r18
     360:	20 81       	ld	r18, Z
     362:	20 68       	ori	r18, 0x80	; 128
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
     368:	00 00       	nop
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <TimerISR>:

void TimerISR() {
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
}
     37e:	00 00       	nop
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     396:	0f 92       	push	r0
     398:	2f 93       	push	r18
     39a:	3f 93       	push	r19
     39c:	4f 93       	push	r20
     39e:	5f 93       	push	r21
     3a0:	6f 93       	push	r22
     3a2:	7f 93       	push	r23
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	af 93       	push	r26
     3aa:	bf 93       	push	r27
     3ac:	ef 93       	push	r30
     3ae:	ff 93       	push	r31
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     3b8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_avr_timer_cntcurr>
     3bc:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x1>
     3c0:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x2>
     3c4:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <_avr_timer_cntcurr+0x3>
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	a1 09       	sbc	r26, r1
     3cc:	b1 09       	sbc	r27, r1
     3ce:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_avr_timer_cntcurr>
     3d2:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_avr_timer_cntcurr+0x1>
     3d6:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_avr_timer_cntcurr+0x2>
     3da:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     3de:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_avr_timer_cntcurr>
     3e2:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x1>
     3e6:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x2>
     3ea:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <_avr_timer_cntcurr+0x3>
     3ee:	89 2b       	or	r24, r25
     3f0:	8a 2b       	or	r24, r26
     3f2:	8b 2b       	or	r24, r27
     3f4:	89 f4       	brne	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		TimerISR(); 				// Call the ISR that the user uses
     3f6:	bc df       	rcall	.-136    	; 0x370 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     400:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     404:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     408:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_avr_timer_cntcurr>
     40c:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_avr_timer_cntcurr+0x1>
     410:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_avr_timer_cntcurr+0x2>
     414:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_avr_timer_cntcurr+0x3>
	}
}
     418:	00 00       	nop
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     43c:	0f 90       	pop	r0
     43e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <CreateCustomChar>:

unsigned char StartFlag = 0;

void CreateCustomChar (unsigned char *image, unsigned char address) // takes an array of chars (to make pattern) and the address to
//where it should be saved
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	00 d0       	rcall	.+0      	; 0x44e <CreateCustomChar+0x6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <CreateCustomChar+0x8>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	9b 83       	std	Y+3, r25	; 0x03
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cnt;

	if(address < 8)                                 // the Hitachi HD44780 only has 8 available positions for custom chars
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	d0 f4       	brcc	.+52     	; 0x494 <CreateCustomChar+0x4c>
	{
		LCD_WriteCommand(0x40 + (address * 8));     //here, we set the CGRAM address
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	08 96       	adiw	r24, 0x08	; 8
     468:	88 0f       	add	r24, r24
     46a:	88 0f       	add	r24, r24
     46c:	88 0f       	add	r24, r24
     46e:	4e de       	rcall	.-868    	; 0x10c <LCD_WriteCommand>


		cnt = 0;
     470:	19 82       	std	Y+1, r1	; 0x01
		while (cnt < 8) {
     472:	0d c0       	rjmp	.+26     	; 0x48e <CreateCustomChar+0x46>
			LCD_WriteData(image[cnt]);    //here, we go through the 8 char array to form the new custom character
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	88 2f       	mov	r24, r24
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	2a 81       	ldd	r18, Y+2	; 0x02
     47c:	3b 81       	ldd	r19, Y+3	; 0x03
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	fc 01       	movw	r30, r24
     484:	80 81       	ld	r24, Z
     486:	71 de       	rcall	.-798    	; 0x16a <LCD_WriteData>
			cnt++;
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_WriteCommand(0x40 + (address * 8));     //here, we set the CGRAM address


		cnt = 0;
		while (cnt < 8) {
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	88 30       	cpi	r24, 0x08	; 8
     492:	80 f3       	brcs	.-32     	; 0x474 <CreateCustomChar+0x2c>
			LCD_WriteData(image[cnt]);    //here, we go through the 8 char array to form the new custom character
			cnt++;
		}
	}
}
     494:	00 00       	nop
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <EEPROM_write+0x6>
     4aa:	1f 92       	push	r1
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	9a 83       	std	Y+2, r25	; 0x02
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     4b6:	00 00       	nop
     4b8:	8f e3       	ldi	r24, 0x3F	; 63
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
     4be:	80 81       	ld	r24, Z
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	82 70       	andi	r24, 0x02	; 2
     4c6:	99 27       	eor	r25, r25
     4c8:	89 2b       	or	r24, r25
     4ca:	b1 f7       	brne	.-20     	; 0x4b8 <EEPROM_write+0x14>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     4cc:	81 e4       	ldi	r24, 0x41	; 65
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	29 81       	ldd	r18, Y+1	; 0x01
     4d2:	3a 81       	ldd	r19, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	31 83       	std	Z+1, r19	; 0x01
     4d8:	20 83       	st	Z, r18
	EEDR = ucData;
     4da:	80 e4       	ldi	r24, 0x40	; 64
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2b 81       	ldd	r18, Y+3	; 0x03
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     4e4:	8f e3       	ldi	r24, 0x3F	; 63
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	2f e3       	ldi	r18, 0x3F	; 63
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	20 81       	ld	r18, Z
     4f0:	24 60       	ori	r18, 0x04	; 4
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     4f6:	8f e3       	ldi	r24, 0x3F	; 63
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2f e3       	ldi	r18, 0x3F	; 63
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	22 60       	ori	r18, 0x02	; 2
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
}
     508:	00 00       	nop
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <EEPROM_read+0x6>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     524:	00 00       	nop
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	99 27       	eor	r25, r25
     536:	89 2b       	or	r24, r25
     538:	b1 f7       	brne	.-20     	; 0x526 <EEPROM_read+0x10>
	;
	/* Set up address register */
	EEAR = uiAddress;
     53a:	81 e4       	ldi	r24, 0x41	; 65
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	29 81       	ldd	r18, Y+1	; 0x01
     540:	3a 81       	ldd	r19, Y+2	; 0x02
     542:	fc 01       	movw	r30, r24
     544:	31 83       	std	Z+1, r19	; 0x01
     546:	20 83       	st	Z, r18
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     548:	8f e3       	ldi	r24, 0x3F	; 63
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2f e3       	ldi	r18, 0x3F	; 63
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	21 60       	ori	r18, 0x01	; 1
     556:	fc 01       	movw	r30, r24
     558:	20 83       	st	Z, r18
	/* Return data from Data Register */
	return EEDR;
     55a:	80 e4       	ldi	r24, 0x40	; 64
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	fc 01       	movw	r30, r24
     560:	80 81       	ld	r24, Z
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <ADC_init>:

void ADC_init() {
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
     574:	8a e7       	ldi	r24, 0x7A	; 122
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	2a e7       	ldi	r18, 0x7A	; 122
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	f9 01       	movw	r30, r18
     57e:	20 81       	ld	r18, Z
     580:	20 6e       	ori	r18, 0xE0	; 224
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
}
     586:	00 00       	nop
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <TickFct_Scoring>:


void TickFct_Scoring()
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
	
	static unsigned char scorecounter = 0;
	
	switch(score_state) {
     596:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <score_state>
     59a:	88 2f       	mov	r24, r24
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	91 05       	cpc	r25, r1
     5a2:	81 f0       	breq	.+32     	; 0x5c4 <TickFct_Scoring+0x36>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 05       	cpc	r25, r1
     5a8:	01 f1       	breq	.+64     	; 0x5ea <TickFct_Scoring+0x5c>
     5aa:	89 2b       	or	r24, r25
     5ac:	49 f5       	brne	.+82     	; 0x600 <TickFct_Scoring+0x72>
		case ScoreStart :
		if (StartFlag) score_state = CurrentlyScoring;
     5ae:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     5b2:	88 23       	and	r24, r24
     5b4:	21 f0       	breq	.+8      	; 0x5be <TickFct_Scoring+0x30>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <score_state>
		else score_state = ScoreStart;
		break;
     5bc:	24 c0       	rjmp	.+72     	; 0x606 <TickFct_Scoring+0x78>
	static unsigned char scorecounter = 0;
	
	switch(score_state) {
		case ScoreStart :
		if (StartFlag) score_state = CurrentlyScoring;
		else score_state = ScoreStart;
     5be:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <score_state>
		break;
     5c2:	21 c0       	rjmp	.+66     	; 0x606 <TickFct_Scoring+0x78>
		
		case CurrentlyScoring :
		if (!StartFlag) score_state = ScoreStart;
     5c4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     5c8:	88 23       	and	r24, r24
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <TickFct_Scoring+0x44>
     5cc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <score_state>
		else if (HitFlag) score_state = StopScoring;
		else score_state = CurrentlyScoring;
		break;
     5d0:	1a c0       	rjmp	.+52     	; 0x606 <TickFct_Scoring+0x78>
		else score_state = ScoreStart;
		break;
		
		case CurrentlyScoring :
		if (!StartFlag) score_state = ScoreStart;
		else if (HitFlag) score_state = StopScoring;
     5d2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <HitFlag>
     5d6:	88 23       	and	r24, r24
     5d8:	21 f0       	breq	.+8      	; 0x5e2 <TickFct_Scoring+0x54>
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <score_state>
		else score_state = CurrentlyScoring;
		break;
     5e0:	12 c0       	rjmp	.+36     	; 0x606 <TickFct_Scoring+0x78>
		break;
		
		case CurrentlyScoring :
		if (!StartFlag) score_state = ScoreStart;
		else if (HitFlag) score_state = StopScoring;
		else score_state = CurrentlyScoring;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <score_state>
		break;
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <TickFct_Scoring+0x78>
		
		case StopScoring :
		if (!StartFlag) score_state = ScoreStart;
     5ea:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     5ee:	88 23       	and	r24, r24
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <TickFct_Scoring+0x6a>
     5f2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <score_state>
		else score_state = StopScoring;
		break;
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <TickFct_Scoring+0x78>
		else score_state = CurrentlyScoring;
		break;
		
		case StopScoring :
		if (!StartFlag) score_state = ScoreStart;
		else score_state = StopScoring;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <score_state>
		break;
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <TickFct_Scoring+0x78>
		
		default :
		score_state = ScoreStart;
     600:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <score_state>
		break;
     604:	00 00       	nop
	}
	
	switch(score_state) {
     606:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <score_state>
     60a:	88 2f       	mov	r24, r24
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	19 f0       	breq	.+6      	; 0x618 <TickFct_Scoring+0x8a>
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	21 f0       	breq	.+8      	; 0x61e <TickFct_Scoring+0x90>
			Score10sPlace = 0;
		}
		scorecounter++;
		break;
	}
}
     616:	2a c0       	rjmp	.+84     	; 0x66c <TickFct_Scoring+0xde>
		break;
	}
	
	switch(score_state) {
		case ScoreStart :
		scorecounter = 0;
     618:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <scorecounter.2029>
		break;
     61c:	27 c0       	rjmp	.+78     	; 0x66c <TickFct_Scoring+0xde>
		
		case CurrentlyScoring :
		if (scorecounter >= 2) {
     61e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <scorecounter.2029>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	38 f0       	brcs	.+14     	; 0x634 <TickFct_Scoring+0xa6>
			Score1sPlace++;
     626:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
     62a:	8f 5f       	subi	r24, 0xFF	; 255
     62c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Score1sPlace>
			scorecounter = 0;
     630:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <scorecounter.2029>
		}
		if (Score1sPlace >= 10) {
     634:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
     638:	8a 30       	cpi	r24, 0x0A	; 10
     63a:	38 f0       	brcs	.+14     	; 0x64a <TickFct_Scoring+0xbc>
			Score10sPlace++;
     63c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Score10sPlace>
			Score1sPlace = 0;
     646:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <Score1sPlace>
		}
		if (Score10sPlace >= 10) {
     64a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     64e:	8a 30       	cpi	r24, 0x0A	; 10
     650:	38 f0       	brcs	.+14     	; 0x660 <TickFct_Scoring+0xd2>
			Score100sPlace++;
     652:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Score100sPlace>
			Score10sPlace = 0;
     65c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Score10sPlace>
		}
		scorecounter++;
     660:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <scorecounter.2029>
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <scorecounter.2029>
		break;
     66a:	00 00       	nop
	}
}
     66c:	00 00       	nop
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <TickFct_TestOutput>:

void TickFct_TestOutput()
{
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	2a 97       	sbiw	r28, 0x0a	; 10
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
	
	static unsigned char gameovercounter = 0;
	
	switch(testoutput_state){
     688:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <testoutput_state>
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	91 05       	cpc	r25, r1
     694:	09 f4       	brne	.+2      	; 0x698 <TickFct_TestOutput+0x24>
     696:	34 c1       	rjmp	.+616    	; 0x900 <TickFct_TestOutput+0x28c>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	34 f4       	brge	.+12     	; 0x6aa <TickFct_TestOutput+0x36>
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	61 f0       	breq	.+24     	; 0x6ba <TickFct_TestOutput+0x46>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <TickFct_TestOutput+0x34>
     6a6:	c3 c0       	rjmp	.+390    	; 0x82e <TickFct_TestOutput+0x1ba>
     6a8:	16 c2       	rjmp	.+1068   	; 0xad6 <TickFct_TestOutput+0x462>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	91 05       	cpc	r25, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <TickFct_TestOutput+0x3e>
     6b0:	b3 c1       	rjmp	.+870    	; 0xa18 <TickFct_TestOutput+0x3a4>
     6b2:	04 97       	sbiw	r24, 0x04	; 4
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <TickFct_TestOutput+0x44>
     6b6:	cb c1       	rjmp	.+918    	; 0xa4e <TickFct_TestOutput+0x3da>
     6b8:	0e c2       	rjmp	.+1052   	; 0xad6 <TickFct_TestOutput+0x462>
		case Start :
		testoutput_state = WaitButtonPress;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
		object2position = object3position = object4position = object5position = object6position = 22;
     6c0:	86 e1       	ldi	r24, 0x16	; 22
     6c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <object6position>
     6c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <object6position>
     6ca:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <object5position>
     6ce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <object5position>
     6d2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <object4position>
     6d6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <object4position>
     6da:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <object3position>
     6de:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <object3position>
     6e2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <object2position>
		object7position = object8position = 22;
     6e6:	86 e1       	ldi	r24, 0x16	; 22
     6e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <object8position>
     6ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <object8position>
     6f0:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <object7position>
		obstacle1gonecnt = obstacle2gonecnt = obstacle3gonecnt = obstacle4gonecnt = obstacle5gonecnt = 0;
     6f4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <obstacle5gonecnt>
     6f8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <obstacle5gonecnt>
     6fc:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <obstacle4gonecnt>
     700:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
     704:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <obstacle3gonecnt>
     708:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
     70c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <obstacle2gonecnt>
     710:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     714:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <obstacle1gonecnt>
		playerposition = 3;
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <playerposition>
		obstacle6gonecnt = obstacle7gonecnt = obstacle8gonecnt = 0;
     71e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <obstacle8gonecnt>
     722:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <obstacle8gonecnt>
     726:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <obstacle7gonecnt>
     72a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <obstacle7gonecnt>
     72e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <obstacle6gonecnt>
		level1Flag = 1;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <level1Flag>
		level2Flag = level3Flag = level4Flag = level5Flag = 0;
     738:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <level5Flag>
     73c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <level5Flag>
     740:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <level4Flag>
     744:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <level4Flag>
     748:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <level3Flag>
     74c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <level3Flag>
     750:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <level2Flag>
		object1Flag = object2Flag = object3Flag = object4Flag = object5Flag = object6Flag = object7Flag = object8Flag = 0;
     754:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <object8Flag>
     758:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <object8Flag>
     75c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <object7Flag>
     760:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <object7Flag>
     764:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <object6Flag>
     768:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <object6Flag>
     76c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <object5Flag>
     770:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <object5Flag>
     774:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <object4Flag>
     778:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <object4Flag>
     77c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <object3Flag>
     780:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <object3Flag>
     784:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <object2Flag>
     788:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <object2Flag>
     78c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <object1Flag>
		StartFlag = 0;
     790:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <StartFlag>
		HitFlag = 0;
     794:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <HitFlag>
		cnt = cnt2 = cnt5 = cnt8 = 17;
     798:	81 e1       	ldi	r24, 0x11	; 17
     79a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <cnt8>
     79e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
     7a2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <cnt5>
     7a6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <cnt5>
     7aa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <cnt2>
     7ae:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
     7b2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
		cnt3 = cnt4 = cnt6 = cnt7 = 33;
     7b6:	81 e2       	ldi	r24, 0x21	; 33
     7b8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <cnt7>
     7bc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <cnt7>
     7c0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <cnt6>
     7c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <cnt6>
     7c8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
     7cc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
     7d0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
		tickcnt = 0;
     7d4:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <tickcnt>
		gameovercounter = 0;
     7d8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <gameovercounter.2040>
		Score1sPlace = Score10sPlace = Score100sPlace = 0;
     7dc:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Score100sPlace>
     7e0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
     7e4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Score10sPlace>
     7e8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     7ec:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Score1sPlace>
		
		LCD_ClearScreen();
     7f0:	6d dc       	rcall	.-1830   	; 0xcc <LCD_ClearScreen>
		LCD_Cursor(1);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	13 dd       	rcall	.-1498   	; 0x21c <LCD_Cursor>
		LCD_WriteData(4);
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	b8 dc       	rcall	.-1680   	; 0x16a <LCD_WriteData>
		LCD_WriteData(4);
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	b6 dc       	rcall	.-1684   	; 0x16a <LCD_WriteData>
     7fe:	1a 82       	std	Y+2, r1	; 0x02
		
		for (int i = 0; i < 12; i++){
     800:	19 82       	std	Y+1, r1	; 0x01
     802:	0c c0       	rjmp	.+24     	; 0x81c <TickFct_TestOutput+0x1a8>
     804:	89 81       	ldd	r24, Y+1	; 0x01
			LCD_WriteData(StartMsg[i]);
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	8f 5b       	subi	r24, 0xBF	; 191
     80a:	9e 4f       	sbci	r25, 0xFE	; 254
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	ac dc       	rcall	.-1704   	; 0x16a <LCD_WriteData>
     812:	89 81       	ldd	r24, Y+1	; 0x01
		LCD_ClearScreen();
		LCD_Cursor(1);
		LCD_WriteData(4);
		LCD_WriteData(4);
		
		for (int i = 0; i < 12; i++){
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	0c 97       	sbiw	r24, 0x0c	; 12
			LCD_WriteData(StartMsg[i]);
		}
		LCD_WriteData(5);
     822:	84 f3       	brlt	.-32     	; 0x804 <TickFct_TestOutput+0x190>
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	a1 dc       	rcall	.-1726   	; 0x16a <LCD_WriteData>
		LCD_WriteData(5);
     828:	85 e0       	ldi	r24, 0x05	; 5
     82a:	9f dc       	rcall	.-1730   	; 0x16a <LCD_WriteData>
     82c:	58 c1       	rjmp	.+688    	; 0xade <TickFct_TestOutput+0x46a>
		break;
     82e:	80 e2       	ldi	r24, 0x20	; 32
		
		case WaitButtonPress :
		if (SCORE_BUTTON && !RESET_BUTTON && !START_BUTTON) {
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	88 70       	andi	r24, 0x08	; 8
     83c:	99 27       	eor	r25, r25
     83e:	89 2b       	or	r24, r25
     840:	71 f5       	brne	.+92     	; 0x89e <TickFct_TestOutput+0x22a>
     842:	80 e2       	ldi	r24, 0x20	; 32
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	88 2f       	mov	r24, r24
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	84 70       	andi	r24, 0x04	; 4
     850:	99 27       	eor	r25, r25
     852:	89 2b       	or	r24, r25
     854:	21 f1       	breq	.+72     	; 0x89e <TickFct_TestOutput+0x22a>
     856:	80 e2       	ldi	r24, 0x20	; 32
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	82 70       	andi	r24, 0x02	; 2
     864:	99 27       	eor	r25, r25
     866:	89 2b       	or	r24, r25
			testoutput_state = DisplayScore;
     868:	d1 f0       	breq	.+52     	; 0x89e <TickFct_TestOutput+0x22a>
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
			LCD_ClearScreen();
     870:	2d dc       	rcall	.-1958   	; 0xcc <LCD_ClearScreen>
			LCD_Cursor(1);
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	d3 dc       	rcall	.-1626   	; 0x21c <LCD_Cursor>
     876:	1c 82       	std	Y+4, r1	; 0x04
			for (int i = 0; i < 12; i++) {
     878:	1b 82       	std	Y+3, r1	; 0x03
     87a:	0c c0       	rjmp	.+24     	; 0x894 <TickFct_TestOutput+0x220>
				LCD_WriteData(highscoremsg[i]);
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	8f 59       	subi	r24, 0x9F	; 159
     882:	9e 4f       	sbci	r25, 0xFE	; 254
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	70 dc       	rcall	.-1824   	; 0x16a <LCD_WriteData>
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
		case WaitButtonPress :
		if (SCORE_BUTTON && !RESET_BUTTON && !START_BUTTON) {
			testoutput_state = DisplayScore;
			LCD_ClearScreen();
			LCD_Cursor(1);
			for (int i = 0; i < 12; i++) {
     88c:	9c 81       	ldd	r25, Y+4	; 0x04
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	9c 83       	std	Y+4, r25	; 0x04
     892:	8b 83       	std	Y+3, r24	; 0x03
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	0c 97       	sbiw	r24, 0x0c	; 12
     89a:	84 f3       	brlt	.-32     	; 0x87c <TickFct_TestOutput+0x208>
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <TickFct_TestOutput+0x28a>
     89e:	80 e2       	ldi	r24, 0x20	; 32
				LCD_WriteData(highscoremsg[i]);
			}
		}
		else if (START_BUTTON && !RESET_BUTTON && !SCORE_BUTTON){
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	82 70       	andi	r24, 0x02	; 2
     8ac:	99 27       	eor	r25, r25
     8ae:	89 2b       	or	r24, r25
     8b0:	11 f5       	brne	.+68     	; 0x8f6 <TickFct_TestOutput+0x282>
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	84 70       	andi	r24, 0x04	; 4
     8c0:	99 27       	eor	r25, r25
     8c2:	89 2b       	or	r24, r25
     8c4:	c1 f0       	breq	.+48     	; 0x8f6 <TickFct_TestOutput+0x282>
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	88 70       	andi	r24, 0x08	; 8
     8d4:	99 27       	eor	r25, r25
     8d6:	89 2b       	or	r24, r25
     8d8:	71 f0       	breq	.+28     	; 0x8f6 <TickFct_TestOutput+0x282>
			testoutput_state = Output;
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
			StartFlag = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <StartFlag>
			LCD_DisplayString(1, Track);
     8e6:	6e e6       	ldi	r22, 0x6E	; 110
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	6d dc       	rcall	.-1830   	; 0x1c8 <LCD_DisplayString>
     8ee:	83 e0       	ldi	r24, 0x03	; 3
			playerposition = 3;
     8f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <playerposition>
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <TickFct_TestOutput+0x28a>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
		}
		else{
			testoutput_state = WaitButtonPress;
     8f8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
     8fc:	f0 c0       	rjmp	.+480    	; 0xade <TickFct_TestOutput+0x46a>
		}
		break;
     8fe:	ef c0       	rjmp	.+478    	; 0xade <TickFct_TestOutput+0x46a>
		
		case Output :
		if(HitFlag){
     900:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <HitFlag>
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <TickFct_TestOutput+0x296>
			testoutput_state = GameOver;
     908:	6c c0       	rjmp	.+216    	; 0x9e2 <TickFct_TestOutput+0x36e>
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
			tmp100scompare = EEPROM_read(0x04);
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	00 de       	rcall	.-1024   	; 0x516 <EEPROM_read>
     916:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <tmp100scompare>
			tmp10scompare = EEPROM_read(0x05);
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fb dd       	rcall	.-1034   	; 0x516 <EEPROM_read>
     920:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tmp10scompare>
			tmp1scompare = EEPROM_read(0x06);
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	f6 dd       	rcall	.-1044   	; 0x516 <EEPROM_read>
     92a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <tmp1scompare>
			
			if (Score100sPlace > tmp100scompare) {
     92e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Score100sPlace>
     932:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <tmp100scompare>
     936:	89 17       	cp	r24, r25
				EEPROM_write(0x04, Score100sPlace);
     938:	98 f4       	brcc	.+38     	; 0x960 <TickFct_TestOutput+0x2ec>
     93a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
     93e:	68 2f       	mov	r22, r24
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	90 e0       	ldi	r25, 0x00	; 0
				EEPROM_write(0x05, Score10sPlace);
     944:	af dd       	rcall	.-1186   	; 0x4a4 <EEPROM_write>
     946:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     94a:	68 2f       	mov	r22, r24
     94c:	85 e0       	ldi	r24, 0x05	; 5
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a9 dd       	rcall	.-1198   	; 0x4a4 <EEPROM_write>
				EEPROM_write(0x06, Score1sPlace);
     952:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
     956:	68 2f       	mov	r22, r24
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	a3 dd       	rcall	.-1210   	; 0x4a4 <EEPROM_write>
     95e:	be c0       	rjmp	.+380    	; 0xadc <TickFct_TestOutput+0x468>
			testoutput_state = Start;
		}
		else{
			testoutput_state = Output;
		}
		break;
     960:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Score100sPlace>
			if (Score100sPlace > tmp100scompare) {
				EEPROM_write(0x04, Score100sPlace);
				EEPROM_write(0x05, Score10sPlace);
				EEPROM_write(0x06, Score1sPlace);
			}
			else if (Score100sPlace == tmp100scompare) {
     964:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <tmp100scompare>
     968:	98 17       	cp	r25, r24
     96a:	09 f0       	breq	.+2      	; 0x96e <TickFct_TestOutput+0x2fa>
     96c:	b7 c0       	rjmp	.+366    	; 0xadc <TickFct_TestOutput+0x468>
				if (Score10sPlace > tmp10scompare) {
     96e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <Score10sPlace>
     972:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tmp10scompare>
     976:	89 17       	cp	r24, r25
					EEPROM_write(0x04, Score100sPlace);
     978:	98 f4       	brcc	.+38     	; 0x9a0 <TickFct_TestOutput+0x32c>
     97a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
     97e:	68 2f       	mov	r22, r24
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	90 e0       	ldi	r25, 0x00	; 0
					EEPROM_write(0x05, Score10sPlace);
     984:	8f dd       	rcall	.-1250   	; 0x4a4 <EEPROM_write>
     986:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     98a:	68 2f       	mov	r22, r24
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	89 dd       	rcall	.-1262   	; 0x4a4 <EEPROM_write>
					EEPROM_write(0x06, Score1sPlace);
     992:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
     996:	68 2f       	mov	r22, r24
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	83 dd       	rcall	.-1274   	; 0x4a4 <EEPROM_write>
     99e:	9e c0       	rjmp	.+316    	; 0xadc <TickFct_TestOutput+0x468>
				}
				else if (Score10sPlace == tmp10scompare) {
     9a0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <Score10sPlace>
     9a4:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tmp10scompare>
     9a8:	98 17       	cp	r25, r24
     9aa:	09 f0       	breq	.+2      	; 0x9ae <TickFct_TestOutput+0x33a>
					if (Score1sPlace > tmp1scompare) {
     9ac:	97 c0       	rjmp	.+302    	; 0xadc <TickFct_TestOutput+0x468>
     9ae:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <Score1sPlace>
     9b2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <tmp1scompare>
     9b6:	89 17       	cp	r24, r25
						EEPROM_write(0x04, Score100sPlace);
     9b8:	08 f0       	brcs	.+2      	; 0x9bc <TickFct_TestOutput+0x348>
     9ba:	90 c0       	rjmp	.+288    	; 0xadc <TickFct_TestOutput+0x468>
     9bc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
     9c0:	68 2f       	mov	r22, r24
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	90 e0       	ldi	r25, 0x00	; 0
						EEPROM_write(0x05, Score10sPlace);
     9c6:	6e dd       	rcall	.-1316   	; 0x4a4 <EEPROM_write>
     9c8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
     9cc:	68 2f       	mov	r22, r24
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	68 dd       	rcall	.-1328   	; 0x4a4 <EEPROM_write>
						EEPROM_write(0x06, Score1sPlace);
     9d4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
     9d8:	68 2f       	mov	r22, r24
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	62 dd       	rcall	.-1340   	; 0x4a4 <EEPROM_write>
     9e0:	7d c0       	rjmp	.+250    	; 0xadc <TickFct_TestOutput+0x468>
			testoutput_state = Start;
		}
		else{
			testoutput_state = Output;
		}
		break;
     9e2:	80 e2       	ldi	r24, 0x20	; 32
				}
				else if (Score10sPlace < tmp10scompare);
			}
			else if (Score100sPlace < tmp100scompare);
		}
		else if (RESET_BUTTON && !START_BUTTON) {
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	fc 01       	movw	r30, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	84 70       	andi	r24, 0x04	; 4
     9f0:	99 27       	eor	r25, r25
     9f2:	89 2b       	or	r24, r25
     9f4:	69 f4       	brne	.+26     	; 0xa10 <TickFct_TestOutput+0x39c>
     9f6:	80 e2       	ldi	r24, 0x20	; 32
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	82 70       	andi	r24, 0x02	; 2
     a04:	99 27       	eor	r25, r25
     a06:	89 2b       	or	r24, r25
     a08:	19 f0       	breq	.+6      	; 0xa10 <TickFct_TestOutput+0x39c>
     a0a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <testoutput_state>
			testoutput_state = Start;
     a0e:	66 c0       	rjmp	.+204    	; 0xadc <TickFct_TestOutput+0x468>
		}
		else{
			testoutput_state = Output;
		}
		break;
     a10:	82 e0       	ldi	r24, 0x02	; 2
		}
		else if (RESET_BUTTON && !START_BUTTON) {
			testoutput_state = Start;
		}
		else{
			testoutput_state = Output;
     a12:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
     a16:	62 c0       	rjmp	.+196    	; 0xadc <TickFct_TestOutput+0x468>
		}
		break;
     a18:	80 e2       	ldi	r24, 0x20	; 32
		
		case GameOver :
		if (RESET_BUTTON && !START_BUTTON) testoutput_state = Start;
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	84 70       	andi	r24, 0x04	; 4
     a26:	99 27       	eor	r25, r25
     a28:	89 2b       	or	r24, r25
     a2a:	69 f4       	brne	.+26     	; 0xa46 <TickFct_TestOutput+0x3d2>
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	82 70       	andi	r24, 0x02	; 2
     a3a:	99 27       	eor	r25, r25
     a3c:	89 2b       	or	r24, r25
     a3e:	19 f0       	breq	.+6      	; 0xa46 <TickFct_TestOutput+0x3d2>
     a40:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <testoutput_state>
     a44:	4c c0       	rjmp	.+152    	; 0xade <TickFct_TestOutput+0x46a>
		else testoutput_state = GameOver;
		break;
     a46:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
		
		case GameOver :
		if (RESET_BUTTON && !START_BUTTON) testoutput_state = Start;
		else testoutput_state = GameOver;
     a48:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
     a4c:	48 c0       	rjmp	.+144    	; 0xade <TickFct_TestOutput+0x46a>
		break;
     a4e:	80 e2       	ldi	r24, 0x20	; 32
		
		case DisplayScore :
		if (SCORE_BUTTON && !RESET_BUTTON && !START_BUTTON) {
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	fc 01       	movw	r30, r24
     a54:	80 81       	ld	r24, Z
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	88 70       	andi	r24, 0x08	; 8
     a5c:	99 27       	eor	r25, r25
     a5e:	89 2b       	or	r24, r25
     a60:	c1 f4       	brne	.+48     	; 0xa92 <TickFct_TestOutput+0x41e>
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	84 70       	andi	r24, 0x04	; 4
     a70:	99 27       	eor	r25, r25
     a72:	89 2b       	or	r24, r25
     a74:	71 f0       	breq	.+28     	; 0xa92 <TickFct_TestOutput+0x41e>
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 81       	ld	r24, Z
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	82 70       	andi	r24, 0x02	; 2
     a84:	99 27       	eor	r25, r25
			testoutput_state = DisplayScore;
     a86:	89 2b       	or	r24, r25
     a88:	21 f0       	breq	.+8      	; 0xa92 <TickFct_TestOutput+0x41e>
				LCD_WriteData(StartMsg[i]);
			}
			LCD_WriteData(5);
			LCD_WriteData(5);
		}
		break;
     a8a:	84 e0       	ldi	r24, 0x04	; 4
		case DisplayScore :
		if (SCORE_BUTTON && !RESET_BUTTON && !START_BUTTON) {
			testoutput_state = DisplayScore;
		}
		else {
			testoutput_state = WaitButtonPress;
     a8c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
     a90:	26 c0       	rjmp	.+76     	; 0xade <TickFct_TestOutput+0x46a>
			LCD_ClearScreen();
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <testoutput_state>
			LCD_Cursor(1);
     a98:	19 db       	rcall	.-2510   	; 0xcc <LCD_ClearScreen>
			LCD_WriteData(4);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	bf db       	rcall	.-2178   	; 0x21c <LCD_Cursor>
			LCD_WriteData(4);
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	64 db       	rcall	.-2360   	; 0x16a <LCD_WriteData>
     aa2:	84 e0       	ldi	r24, 0x04	; 4
			
			for (int i = 0; i < 12; i++){
     aa4:	62 db       	rcall	.-2364   	; 0x16a <LCD_WriteData>
     aa6:	1e 82       	std	Y+6, r1	; 0x06
     aa8:	1d 82       	std	Y+5, r1	; 0x05
				LCD_WriteData(StartMsg[i]);
     aaa:	0c c0       	rjmp	.+24     	; 0xac4 <TickFct_TestOutput+0x450>
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	9e 81       	ldd	r25, Y+6	; 0x06
     ab0:	8f 5b       	subi	r24, 0xBF	; 191
     ab2:	9e 4f       	sbci	r25, 0xFE	; 254
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	58 db       	rcall	.-2384   	; 0x16a <LCD_WriteData>
			LCD_ClearScreen();
			LCD_Cursor(1);
			LCD_WriteData(4);
			LCD_WriteData(4);
			
			for (int i = 0; i < 12; i++){
     aba:	8d 81       	ldd	r24, Y+5	; 0x05
     abc:	9e 81       	ldd	r25, Y+6	; 0x06
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	9e 83       	std	Y+6, r25	; 0x06
     ac2:	8d 83       	std	Y+5, r24	; 0x05
     ac4:	8d 81       	ldd	r24, Y+5	; 0x05
     ac6:	9e 81       	ldd	r25, Y+6	; 0x06
     ac8:	0c 97       	sbiw	r24, 0x0c	; 12
     aca:	84 f3       	brlt	.-32     	; 0xaac <TickFct_TestOutput+0x438>
				LCD_WriteData(StartMsg[i]);
			}
			LCD_WriteData(5);
     acc:	85 e0       	ldi	r24, 0x05	; 5
     ace:	4d db       	rcall	.-2406   	; 0x16a <LCD_WriteData>
			LCD_WriteData(5);
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	4b db       	rcall	.-2410   	; 0x16a <LCD_WriteData>
		}
		break;
		
		default :
		testoutput_state = Start;
     ad4:	04 c0       	rjmp	.+8      	; 0xade <TickFct_TestOutput+0x46a>
		break;
     ad6:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <testoutput_state>
	}
	
	switch(testoutput_state){
     ada:	01 c0       	rjmp	.+2      	; 0xade <TickFct_TestOutput+0x46a>
     adc:	00 00       	nop
     ade:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <testoutput_state>
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	91 05       	cpc	r25, r1
     aea:	61 f0       	breq	.+24     	; 0xb04 <TickFct_TestOutput+0x490>
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	91 05       	cpc	r25, r1
     af0:	0c f4       	brge	.+2      	; 0xaf4 <TickFct_TestOutput+0x480>
     af2:	ce c0       	rjmp	.+412    	; 0xc90 <TickFct_TestOutput+0x61c>
     af4:	83 30       	cpi	r24, 0x03	; 3
		LCD_WriteData(tmpscore1 + '0');
		LCD_WriteData(tmpscore2 + '0');
		LCD_WriteData(tmpscore3 + '0');
		break;
	}
}
     af6:	91 05       	cpc	r25, r1
	switch(testoutput_state){
		case WaitButtonPress :
		break;
		
		case Output :
		LCD_Cursor(playerposition);
     af8:	09 f4       	brne	.+2      	; 0xafc <TickFct_TestOutput+0x488>
     afa:	5b c0       	rjmp	.+182    	; 0xbb2 <TickFct_TestOutput+0x53e>
     afc:	04 97       	sbiw	r24, 0x04	; 4
		LCD_WriteData(1);
     afe:	09 f4       	brne	.+2      	; 0xb02 <TickFct_TestOutput+0x48e>
     b00:	a9 c0       	rjmp	.+338    	; 0xc54 <TickFct_TestOutput+0x5e0>
     b02:	c9 c0       	rjmp	.+402    	; 0xc96 <TickFct_TestOutput+0x622>
		LCD_Cursor(1);
     b04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <playerposition>
		LCD_WriteData('_');
     b08:	89 db       	rcall	.-2286   	; 0x21c <LCD_Cursor>
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	2e db       	rcall	.-2468   	; 0x16a <LCD_WriteData>
		LCD_Cursor(17);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	85 db       	rcall	.-2294   	; 0x21c <LCD_Cursor>
     b12:	8f e5       	ldi	r24, 0x5F	; 95
		LCD_WriteData('_');
     b14:	2a db       	rcall	.-2476   	; 0x16a <LCD_WriteData>
     b16:	81 e1       	ldi	r24, 0x11	; 17
		if (object1Flag){
     b18:	81 db       	rcall	.-2302   	; 0x21c <LCD_Cursor>
     b1a:	8f e5       	ldi	r24, 0x5F	; 95
     b1c:	26 db       	rcall	.-2484   	; 0x16a <LCD_WriteData>
     b1e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <object1Flag>
			LCD_Cursor(objectposition);
     b22:	88 23       	and	r24, r24
     b24:	29 f0       	breq	.+10     	; 0xb30 <TickFct_TestOutput+0x4bc>
			LCD_WriteData(3);
     b26:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <objectposition>
		}
		if (object2Flag){
     b2a:	78 db       	rcall	.-2320   	; 0x21c <LCD_Cursor>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	1d db       	rcall	.-2502   	; 0x16a <LCD_WriteData>
     b30:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <object2Flag>
			LCD_Cursor(object2position);
     b34:	88 23       	and	r24, r24
			LCD_WriteData(2);
     b36:	29 f0       	breq	.+10     	; 0xb42 <TickFct_TestOutput+0x4ce>
     b38:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <object2position>
		}
		if (object3Flag){
     b3c:	6f db       	rcall	.-2338   	; 0x21c <LCD_Cursor>
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	14 db       	rcall	.-2520   	; 0x16a <LCD_WriteData>
			LCD_Cursor(object3position);
     b42:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <object3Flag>
     b46:	88 23       	and	r24, r24
			LCD_WriteData(3);
     b48:	29 f0       	breq	.+10     	; 0xb54 <TickFct_TestOutput+0x4e0>
     b4a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <object3position>
		}
		if (object4Flag){
     b4e:	66 db       	rcall	.-2356   	; 0x21c <LCD_Cursor>
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	0b db       	rcall	.-2538   	; 0x16a <LCD_WriteData>
			LCD_Cursor(object4position);
     b54:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <object4Flag>
     b58:	88 23       	and	r24, r24
     b5a:	29 f0       	breq	.+10     	; 0xb66 <TickFct_TestOutput+0x4f2>
			LCD_WriteData(2);
     b5c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <object4position>
		}
		if (object5Flag) {
     b60:	5d db       	rcall	.-2374   	; 0x21c <LCD_Cursor>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	02 db       	rcall	.-2556   	; 0x16a <LCD_WriteData>
			LCD_Cursor(object5position);
     b66:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <object5Flag>
     b6a:	88 23       	and	r24, r24
     b6c:	29 f0       	breq	.+10     	; 0xb78 <TickFct_TestOutput+0x504>
			LCD_WriteData(6);
     b6e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <object5position>
		}
		if (object6Flag) {
     b72:	54 db       	rcall	.-2392   	; 0x21c <LCD_Cursor>
     b74:	86 e0       	ldi	r24, 0x06	; 6
     b76:	f9 da       	rcall	.-2574   	; 0x16a <LCD_WriteData>
     b78:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <object6Flag>
			LCD_Cursor(object6position);
     b7c:	88 23       	and	r24, r24
     b7e:	29 f0       	breq	.+10     	; 0xb8a <TickFct_TestOutput+0x516>
     b80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <object6position>
			LCD_WriteData(6);
     b84:	4b db       	rcall	.-2410   	; 0x21c <LCD_Cursor>
		}
		if(object7Flag) {
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	f0 da       	rcall	.-2592   	; 0x16a <LCD_WriteData>
     b8a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <object7Flag>
			LCD_Cursor(object7position);
     b8e:	88 23       	and	r24, r24
     b90:	29 f0       	breq	.+10     	; 0xb9c <TickFct_TestOutput+0x528>
			LCD_WriteData(3);
     b92:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <object7position>
		}
		if (object8Flag) {
     b96:	42 db       	rcall	.-2428   	; 0x21c <LCD_Cursor>
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	e7 da       	rcall	.-2610   	; 0x16a <LCD_WriteData>
     b9c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <object8Flag>
			LCD_Cursor(object8position);
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <TickFct_TestOutput+0x532>
			LCD_WriteData(2);
     ba4:	77 c0       	rjmp	.+238    	; 0xc94 <TickFct_TestOutput+0x620>
     ba6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <object8position>
		}
		break;
		
		case GameOver :
		if (gameovercounter >= 30) {
     baa:	38 db       	rcall	.-2448   	; 0x21c <LCD_Cursor>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	dd da       	rcall	.-2630   	; 0x16a <LCD_WriteData>
			LCD_ClearScreen();
     bb0:	71 c0       	rjmp	.+226    	; 0xc94 <TickFct_TestOutput+0x620>
     bb2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gameovercounter.2040>
			LCD_Cursor(1);
     bb6:	8e 31       	cpi	r24, 0x1E	; 30
     bb8:	48 f1       	brcs	.+82     	; 0xc0c <TickFct_TestOutput+0x598>
			for (int i = 0; i < 7; i++) {
     bba:	88 da       	rcall	.-2800   	; 0xcc <LCD_ClearScreen>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData(scoremsg[i]);
     bbe:	2e db       	rcall	.-2468   	; 0x21c <LCD_Cursor>
     bc0:	18 86       	std	Y+8, r1	; 0x08
     bc2:	1f 82       	std	Y+7, r1	; 0x07
     bc4:	0c c0       	rjmp	.+24     	; 0xbde <TickFct_TestOutput+0x56a>
     bc6:	8f 81       	ldd	r24, Y+7	; 0x07
     bc8:	98 85       	ldd	r25, Y+8	; 0x08
     bca:	87 5a       	subi	r24, 0xA7	; 167
     bcc:	9e 4f       	sbci	r25, 0xFE	; 254
		
		case GameOver :
		if (gameovercounter >= 30) {
			LCD_ClearScreen();
			LCD_Cursor(1);
			for (int i = 0; i < 7; i++) {
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	cb da       	rcall	.-2666   	; 0x16a <LCD_WriteData>
     bd4:	8f 81       	ldd	r24, Y+7	; 0x07
     bd6:	98 85       	ldd	r25, Y+8	; 0x08
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	98 87       	std	Y+8, r25	; 0x08
				LCD_WriteData(scoremsg[i]);
			}
			LCD_Cursor(8);
     bdc:	8f 83       	std	Y+7, r24	; 0x07
     bde:	8f 81       	ldd	r24, Y+7	; 0x07
			LCD_WriteData(Score100sPlace + '0');
     be0:	98 85       	ldd	r25, Y+8	; 0x08
     be2:	07 97       	sbiw	r24, 0x07	; 7
     be4:	84 f3       	brlt	.-32     	; 0xbc6 <TickFct_TestOutput+0x552>
     be6:	88 e0       	ldi	r24, 0x08	; 8
			LCD_Cursor(9);
     be8:	19 db       	rcall	.-2510   	; 0x21c <LCD_Cursor>
     bea:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Score100sPlace>
			LCD_WriteData(Score10sPlace + '0');
     bee:	80 5d       	subi	r24, 0xD0	; 208
     bf0:	bc da       	rcall	.-2696   	; 0x16a <LCD_WriteData>
     bf2:	89 e0       	ldi	r24, 0x09	; 9
     bf4:	13 db       	rcall	.-2522   	; 0x21c <LCD_Cursor>
			LCD_Cursor(10);
     bf6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Score10sPlace>
			LCD_WriteData(Score1sPlace + '0');
     bfa:	80 5d       	subi	r24, 0xD0	; 208
     bfc:	b6 da       	rcall	.-2708   	; 0x16a <LCD_WriteData>
     bfe:	8a e0       	ldi	r24, 0x0A	; 10
     c00:	0d db       	rcall	.-2534   	; 0x21c <LCD_Cursor>
     c02:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Score1sPlace>
		}
		else {
			LCD_ClearScreen();
     c06:	80 5d       	subi	r24, 0xD0	; 208
			LCD_Cursor(2);
     c08:	b0 da       	rcall	.-2720   	; 0x16a <LCD_WriteData>
     c0a:	1e c0       	rjmp	.+60     	; 0xc48 <TickFct_TestOutput+0x5d4>
			LCD_WriteData(7);
     c0c:	5f da       	rcall	.-2882   	; 0xcc <LCD_ClearScreen>
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	05 db       	rcall	.-2550   	; 0x21c <LCD_Cursor>
			LCD_WriteData(7);
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	aa da       	rcall	.-2732   	; 0x16a <LCD_WriteData>
     c16:	87 e0       	ldi	r24, 0x07	; 7
			for (int i = 0; i < 10; i++) {
     c18:	a8 da       	rcall	.-2736   	; 0x16a <LCD_WriteData>
     c1a:	1a 86       	std	Y+10, r1	; 0x0a
     c1c:	19 86       	std	Y+9, r1	; 0x09
				LCD_WriteData(GameOverMsg[i]);
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <TickFct_TestOutput+0x5c4>
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	82 5b       	subi	r24, 0xB2	; 178
     c26:	9e 4f       	sbci	r25, 0xFE	; 254
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	9e da       	rcall	.-2756   	; 0x16a <LCD_WriteData>
		else {
			LCD_ClearScreen();
			LCD_Cursor(2);
			LCD_WriteData(7);
			LCD_WriteData(7);
			for (int i = 0; i < 10; i++) {
     c2e:	89 85       	ldd	r24, Y+9	; 0x09
     c30:	9a 85       	ldd	r25, Y+10	; 0x0a
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	9a 87       	std	Y+10, r25	; 0x0a
     c36:	89 87       	std	Y+9, r24	; 0x09
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	0a 97       	sbiw	r24, 0x0a	; 10
     c3e:	84 f3       	brlt	.-32     	; 0xc20 <TickFct_TestOutput+0x5ac>
				LCD_WriteData(GameOverMsg[i]);
			}
			LCD_WriteData(7);
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	93 da       	rcall	.-2778   	; 0x16a <LCD_WriteData>
     c44:	87 e0       	ldi	r24, 0x07	; 7
			LCD_WriteData(7);
     c46:	91 da       	rcall	.-2782   	; 0x16a <LCD_WriteData>
     c48:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gameovercounter.2040>
		}
		gameovercounter++;
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <gameovercounter.2040>
     c52:	21 c0       	rjmp	.+66     	; 0xc96 <TickFct_TestOutput+0x622>
     c54:	84 e0       	ldi	r24, 0x04	; 4
		break;
     c56:	90 e0       	ldi	r25, 0x00	; 0
		
		case DisplayScore :
		tmpscore1 = EEPROM_read(0x04);
     c58:	5e dc       	rcall	.-1860   	; 0x516 <EEPROM_read>
     c5a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <tmpscore1>
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	59 dc       	rcall	.-1870   	; 0x516 <EEPROM_read>
		tmpscore2 = EEPROM_read(0x05);
     c64:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <tmpscore2>
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	54 dc       	rcall	.-1880   	; 0x516 <EEPROM_read>
     c6e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <tmpscore3>
		tmpscore3 = EEPROM_read(0x06);
     c72:	8d e0       	ldi	r24, 0x0D	; 13
     c74:	d3 da       	rcall	.-2650   	; 0x21c <LCD_Cursor>
     c76:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <tmpscore1>
     c7a:	80 5d       	subi	r24, 0xD0	; 208
		LCD_Cursor(13);
     c7c:	76 da       	rcall	.-2836   	; 0x16a <LCD_WriteData>
     c7e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <tmpscore2>
		LCD_WriteData(tmpscore1 + '0');
     c82:	80 5d       	subi	r24, 0xD0	; 208
     c84:	72 da       	rcall	.-2844   	; 0x16a <LCD_WriteData>
     c86:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <tmpscore3>
     c8a:	80 5d       	subi	r24, 0xD0	; 208
		LCD_WriteData(tmpscore2 + '0');
     c8c:	6e da       	rcall	.-2852   	; 0x16a <LCD_WriteData>
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <TickFct_TestOutput+0x622>
     c90:	00 00       	nop
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <TickFct_TestOutput+0x622>
     c94:	00 00       	nop
		LCD_WriteData(tmpscore3 + '0');
     c96:	00 00       	nop
     c98:	2a 96       	adiw	r28, 0x0a	; 10
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
		break;
     ca0:	0f be       	out	0x3f, r0	; 63
		break;
	}
	
	switch(testoutput_state){
		case WaitButtonPress :
		break;
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
		}
		if (object8Flag) {
			LCD_Cursor(object8position);
			LCD_WriteData(2);
		}
		break;
     ca6:	cf 91       	pop	r28
		LCD_WriteData(tmpscore1 + '0');
		LCD_WriteData(tmpscore2 + '0');
		LCD_WriteData(tmpscore3 + '0');
		break;
	}
}
     ca8:	08 95       	ret

00000caa <TickFct_Position>:
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <position_state>
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	00 97       	sbiw	r24, 0x00	; 0

void TickFct_Position()
{
	switch(position_state){
     cbc:	19 f0       	breq	.+6      	; 0xcc4 <TickFct_Position+0x1a>
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	61 f0       	breq	.+24     	; 0xcda <TickFct_Position+0x30>
     cc2:	16 c0       	rjmp	.+44     	; 0xcf0 <TickFct_Position+0x46>
		case PosStart :
		if (StartFlag) position_state = CalculatingPosition;
     cc4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     cc8:	88 23       	and	r24, r24
     cca:	21 f0       	breq	.+8      	; 0xcd4 <TickFct_Position+0x2a>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <position_state>
		else position_state = PosStart;
		break;
     cd2:	0e c0       	rjmp	.+28     	; 0xcf0 <TickFct_Position+0x46>
void TickFct_Position()
{
	switch(position_state){
		case PosStart :
		if (StartFlag) position_state = CalculatingPosition;
		else position_state = PosStart;
     cd4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <position_state>
		break;
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <TickFct_Position+0x46>
		
		case CalculatingPosition :
		if (StartFlag) position_state = CalculatingPosition;
     cda:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     cde:	88 23       	and	r24, r24
     ce0:	21 f0       	breq	.+8      	; 0xcea <TickFct_Position+0x40>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <position_state>
		else{
			position_state = PosStart;
		}
		break;
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <TickFct_Position+0x44>
		break;
		
		case CalculatingPosition :
		if (StartFlag) position_state = CalculatingPosition;
		else{
			position_state = PosStart;
     cea:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <position_state>
		}
		break;
     cee:	00 00       	nop
	}
	
	switch(position_state){
     cf0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <position_state>
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	19 f0       	breq	.+6      	; 0xd02 <TickFct_Position+0x58>
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <TickFct_Position+0x60>
			LCD_WriteData('_');
		}
		break;
	}
	
}
     d00:	22 c0       	rjmp	.+68     	; 0xd46 <TickFct_Position+0x9c>
		break;
	}
	
	switch(position_state){
		case PosStart :
		playerposition = 3;
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <playerposition>
		break;
     d08:	1e c0       	rjmp	.+60     	; 0xd46 <TickFct_Position+0x9c>
		
		case CalculatingPosition :
		if (x < 400 ){
     d0a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <x>
     d0e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <x+0x1>
     d12:	80 39       	cpi	r24, 0x90	; 144
     d14:	91 40       	sbci	r25, 0x01	; 1
     d16:	40 f4       	brcc	.+16     	; 0xd28 <TickFct_Position+0x7e>
			playerposition = 3;
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <playerposition>
			LCD_Cursor(19);
     d1e:	83 e1       	ldi	r24, 0x13	; 19
     d20:	7d da       	rcall	.-2822   	; 0x21c <LCD_Cursor>
			LCD_WriteData('_');
     d22:	8f e5       	ldi	r24, 0x5F	; 95
     d24:	22 da       	rcall	.-3004   	; 0x16a <LCD_WriteData>
		else if(x > 730){
			playerposition = 19;
			LCD_Cursor(3);
			LCD_WriteData('_');
		}
		break;
     d26:	0e c0       	rjmp	.+28     	; 0xd44 <TickFct_Position+0x9a>
		if (x < 400 ){
			playerposition = 3;
			LCD_Cursor(19);
			LCD_WriteData('_');
		}
		else if(x > 730){
     d28:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <x>
     d2c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <x+0x1>
     d30:	8b 3d       	cpi	r24, 0xDB	; 219
     d32:	92 40       	sbci	r25, 0x02	; 2
     d34:	38 f0       	brcs	.+14     	; 0xd44 <TickFct_Position+0x9a>
			playerposition = 19;
     d36:	83 e1       	ldi	r24, 0x13	; 19
     d38:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <playerposition>
			LCD_Cursor(3);
     d3c:	83 e0       	ldi	r24, 0x03	; 3
			LCD_WriteData('_');
     d3e:	6e da       	rcall	.-2852   	; 0x21c <LCD_Cursor>
     d40:	8f e5       	ldi	r24, 0x5F	; 95
     d42:	13 da       	rcall	.-3034   	; 0x16a <LCD_WriteData>
		}
		break;
     d44:	00 00       	nop
	}
	
}
     d46:	00 00       	nop
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <TickFct_Object>:

void TickFct_Object()
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	switch(obj_state){
     d56:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <obj_state>
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	19 f0       	breq	.+6      	; 0xd68 <TickFct_Object+0x1a>
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	61 f0       	breq	.+24     	; 0xd7e <TickFct_Object+0x30>
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <TickFct_Object+0x46>
		case ObjStart :
		if (StartFlag){
     d68:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     d6c:	88 23       	and	r24, r24
     d6e:	21 f0       	breq	.+8      	; 0xd78 <TickFct_Object+0x2a>
			obj_state = CalculatingObjLocation;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <obj_state>
		}
		else{
			obj_state = ObjStart;
		}
		break;
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <TickFct_Object+0x46>
		case ObjStart :
		if (StartFlag){
			obj_state = CalculatingObjLocation;
		}
		else{
			obj_state = ObjStart;
     d78:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <obj_state>
		}
		break;
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <TickFct_Object+0x46>
		
		case CalculatingObjLocation :
		if (StartFlag) obj_state = CalculatingObjLocation;
     d7e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <TickFct_Object+0x40>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <obj_state>
		else {
			obj_state = ObjStart;
		}
		break;
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <TickFct_Object+0x44>
		break;
		
		case CalculatingObjLocation :
		if (StartFlag) obj_state = CalculatingObjLocation;
		else {
			obj_state = ObjStart;
     d8e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <obj_state>
		}
		break;
     d92:	00 00       	nop
	}
	
	switch(obj_state) {
     d94:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <obj_state>
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <TickFct_Object+0x54>
		}

		tickcnt++;
		break;
	}
}
     da0:	be c2       	rjmp	.+1404   	; 0x131e <TickFct_Object+0x5d0>
	}
	
	switch(obj_state) {
		case CalculatingObjLocation :

		if (level1Flag) {
     da2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <level1Flag>
     da6:	88 23       	and	r24, r24
     da8:	09 f4       	brne	.+2      	; 0xdac <TickFct_Object+0x5e>
     daa:	64 c0       	rjmp	.+200    	; 0xe74 <TickFct_Object+0x126>
			if (obstacle1gonecnt == 3) object1Flag = 0;
     dac:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	11 f4       	brne	.+4      	; 0xdb8 <TickFct_Object+0x6a>
     db4:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <object1Flag>
			if (obstacle2gonecnt == 3) object2Flag = 0;
     db8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <TickFct_Object+0x76>
     dc0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <object2Flag>

			if ((cnt > 1) && (obstacle1gonecnt != 3)) {
     dc4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	b0 f0       	brcs	.+44     	; 0xdf8 <TickFct_Object+0xaa>
     dcc:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 f0       	breq	.+36     	; 0xdf8 <TickFct_Object+0xaa>
				LCD_Cursor(cnt);
     dd4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     dd8:	21 da       	rcall	.-3006   	; 0x21c <LCD_Cursor>
				LCD_WriteData('_');
     dda:	8f e5       	ldi	r24, 0x5F	; 95
     ddc:	c6 d9       	rcall	.-3188   	; 0x16a <LCD_WriteData>
				cnt--;
     dde:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
				objectposition = cnt;
     de8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     dec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <objectposition>
				object1Flag = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <object1Flag>
     df6:	10 c0       	rjmp	.+32     	; 0xe18 <TickFct_Object+0xca>
				} else if ((cnt <= 1) && (obstacle1gonecnt != 3)) {
     df8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	60 f4       	brcc	.+24     	; 0xe18 <TickFct_Object+0xca>
     e00:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	41 f0       	breq	.+16     	; 0xe18 <TickFct_Object+0xca>
				cnt = 17;
     e08:	81 e1       	ldi	r24, 0x11	; 17
     e0a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
				obstacle1gonecnt++;
     e0e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <obstacle1gonecnt>
			}
			if (tickcnt >= 4) {
     e18:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
     e1c:	84 30       	cpi	r24, 0x04	; 4
     e1e:	50 f1       	brcs	.+84     	; 0xe74 <TickFct_Object+0x126>
				if ((cnt3 > 17) && (obstacle2gonecnt != 3)) {
     e20:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e24:	82 31       	cpi	r24, 0x12	; 18
     e26:	b0 f0       	brcs	.+44     	; 0xe54 <TickFct_Object+0x106>
     e28:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	91 f0       	breq	.+36     	; 0xe54 <TickFct_Object+0x106>
					LCD_Cursor(cnt3);
     e30:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
					LCD_WriteData('_');
     e34:	f3 d9       	rcall	.-3098   	; 0x21c <LCD_Cursor>
     e36:	8f e5       	ldi	r24, 0x5F	; 95
     e38:	98 d9       	rcall	.-3280   	; 0x16a <LCD_WriteData>
					cnt3--;
     e3a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
					object2position = cnt3;
     e44:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e48:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <object2position>
					object2Flag = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <object2Flag>
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <TickFct_Object+0x126>
					} else if ((cnt3 <= 17) && (obstacle2gonecnt != 3)){
     e54:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e58:	82 31       	cpi	r24, 0x12	; 18
     e5a:	60 f4       	brcc	.+24     	; 0xe74 <TickFct_Object+0x126>
     e5c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	41 f0       	breq	.+16     	; 0xe74 <TickFct_Object+0x126>
					cnt3 = 33;
     e64:	81 e2       	ldi	r24, 0x21	; 33
     e66:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
					obstacle2gonecnt++;
     e6a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <obstacle2gonecnt>
				}
			}
		}

		if (level2Flag){
     e74:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <level2Flag>
     e78:	88 23       	and	r24, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <TickFct_Object+0x130>
     e7c:	cc c0       	rjmp	.+408    	; 0x1016 <TickFct_Object+0x2c8>

			if ((cnt3 > 17) && (obstacle2gonecnt != 3)) {
     e7e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e82:	82 31       	cpi	r24, 0x12	; 18
     e84:	b0 f0       	brcs	.+44     	; 0xeb2 <TickFct_Object+0x164>
     e86:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     e8a:	83 30       	cpi	r24, 0x03	; 3
				LCD_Cursor(cnt3);
     e8c:	91 f0       	breq	.+36     	; 0xeb2 <TickFct_Object+0x164>
     e8e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
				LCD_WriteData('_');
     e92:	c4 d9       	rcall	.-3192   	; 0x21c <LCD_Cursor>
     e94:	8f e5       	ldi	r24, 0x5F	; 95
     e96:	69 d9       	rcall	.-3374   	; 0x16a <LCD_WriteData>
				cnt3--;
     e98:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     e9c:	81 50       	subi	r24, 0x01	; 1
     e9e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
				object2position = cnt3;
     ea2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     ea6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <object2position>
				object2Flag = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <object2Flag>
     eb0:	10 c0       	rjmp	.+32     	; 0xed2 <TickFct_Object+0x184>
			}
			else if((cnt3 <= 17) && (obstacle2gonecnt != 3)) {
     eb2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
     eb6:	82 31       	cpi	r24, 0x12	; 18
     eb8:	60 f4       	brcc	.+24     	; 0xed2 <TickFct_Object+0x184>
     eba:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	41 f0       	breq	.+16     	; 0xed2 <TickFct_Object+0x184>
				cnt3 = 33;
     ec2:	81 e2       	ldi	r24, 0x21	; 33
     ec4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
				obstacle2gonecnt++;
     ec8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <obstacle2gonecnt>
			}
			if (tickcnt >= 4) {
     ed2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
     ed6:	84 30       	cpi	r24, 0x04	; 4
     ed8:	50 f1       	brcs	.+84     	; 0xf2e <TickFct_Object+0x1e0>
				if ((cnt > 1) && (obstacle1gonecnt != 3)) {
     eda:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	b0 f0       	brcs	.+44     	; 0xf0e <TickFct_Object+0x1c0>
     ee2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
					LCD_Cursor(cnt);
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 f0       	breq	.+36     	; 0xf0e <TickFct_Object+0x1c0>
     eea:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
					LCD_WriteData('_');
     eee:	96 d9       	rcall	.-3284   	; 0x21c <LCD_Cursor>
     ef0:	8f e5       	ldi	r24, 0x5F	; 95
     ef2:	3b d9       	rcall	.-3466   	; 0x16a <LCD_WriteData>
					cnt--;
     ef4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     ef8:	81 50       	subi	r24, 0x01	; 1
     efa:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
					objectposition = cnt;
     efe:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     f02:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <objectposition>
					object1Flag = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <object1Flag>
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <TickFct_Object+0x1e0>
					} else if ((cnt <= 1) && (obstacle1gonecnt != 3)) {
     f0e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	60 f4       	brcc	.+24     	; 0xf2e <TickFct_Object+0x1e0>
     f16:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	41 f0       	breq	.+16     	; 0xf2e <TickFct_Object+0x1e0>
					cnt = 17;
     f1e:	81 e1       	ldi	r24, 0x11	; 17
     f20:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
					obstacle1gonecnt++;
     f24:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <obstacle1gonecnt>
				}
			}

			if (tickcnt >= 25) {
     f2e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
     f32:	89 31       	cpi	r24, 0x19	; 25
     f34:	50 f1       	brcs	.+84     	; 0xf8a <TickFct_Object+0x23c>
				if ((cnt2 > 1) && (obstacle3gonecnt != 2)) {
     f36:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	b0 f0       	brcs	.+44     	; 0xf6a <TickFct_Object+0x21c>
     f3e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
					LCD_Cursor(cnt2);
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	91 f0       	breq	.+36     	; 0xf6a <TickFct_Object+0x21c>
     f46:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
					LCD_WriteData('_');
     f4a:	68 d9       	rcall	.-3376   	; 0x21c <LCD_Cursor>
     f4c:	8f e5       	ldi	r24, 0x5F	; 95
     f4e:	0d d9       	rcall	.-3558   	; 0x16a <LCD_WriteData>
					cnt2--;
     f50:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <cnt2>
					object3position = cnt2;
     f5a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
     f5e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <object3position>
					object3Flag = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <object3Flag>
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <TickFct_Object+0x23c>
					} else if ((cnt2 <= 1) && (obstacle3gonecnt != 2)) {
     f6a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <cnt2>
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	60 f4       	brcc	.+24     	; 0xf8a <TickFct_Object+0x23c>
     f72:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	41 f0       	breq	.+16     	; 0xf8a <TickFct_Object+0x23c>
					cnt2 = 17;
     f7a:	81 e1       	ldi	r24, 0x11	; 17
     f7c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <cnt2>
					obstacle3gonecnt++;
     f80:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <obstacle3gonecnt>
				}
			}

			if (tickcnt >= 28) {
     f8a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
     f8e:	8c 31       	cpi	r24, 0x1C	; 28
     f90:	50 f1       	brcs	.+84     	; 0xfe6 <TickFct_Object+0x298>
				if ((cnt4 > 17) && (obstacle4gonecnt != 2)) {
     f92:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
     f96:	82 31       	cpi	r24, 0x12	; 18
     f98:	b0 f0       	brcs	.+44     	; 0xfc6 <TickFct_Object+0x278>
     f9a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
					LCD_Cursor(cnt4);
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	91 f0       	breq	.+36     	; 0xfc6 <TickFct_Object+0x278>
     fa2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
					LCD_WriteData('_');
     fa6:	3a d9       	rcall	.-3468   	; 0x21c <LCD_Cursor>
     fa8:	8f e5       	ldi	r24, 0x5F	; 95
     faa:	df d8       	rcall	.-3650   	; 0x16a <LCD_WriteData>
					cnt4--;
     fac:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
					object4position = cnt4;
     fb6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
     fba:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <object4position>
					object4Flag = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <object4Flag>
     fc4:	10 c0       	rjmp	.+32     	; 0xfe6 <TickFct_Object+0x298>
				}
				else if((cnt4 <= 17) && (obstacle4gonecnt != 2)) {
     fc6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
     fca:	82 31       	cpi	r24, 0x12	; 18
     fcc:	60 f4       	brcc	.+24     	; 0xfe6 <TickFct_Object+0x298>
     fce:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	41 f0       	breq	.+16     	; 0xfe6 <TickFct_Object+0x298>
					cnt4 = 33;
     fd6:	81 e2       	ldi	r24, 0x21	; 33
     fd8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
					obstacle4gonecnt++;
     fdc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <obstacle4gonecnt>
				}
			}
			if (obstacle2gonecnt == 3) object2Flag = 0;
     fe6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	11 f4       	brne	.+4      	; 0xff2 <TickFct_Object+0x2a4>
     fee:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <object2Flag>
			if (obstacle1gonecnt == 3) object1Flag = 0;
     ff2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	11 f4       	brne	.+4      	; 0xffe <TickFct_Object+0x2b0>
     ffa:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <object1Flag>
			if (obstacle3gonecnt == 2) object3Flag = 0;
     ffe:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	11 f4       	brne	.+4      	; 0x100a <TickFct_Object+0x2bc>
    1006:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <object3Flag>
			if (obstacle4gonecnt == 2) object4Flag = 0;
    100a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	11 f4       	brne	.+4      	; 0x1016 <TickFct_Object+0x2c8>
    1012:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <object4Flag>

		}

		if (level3Flag) {
    1016:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <level3Flag>
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <TickFct_Object+0x2d2>
			if ((cnt > 1) && (obstacle1gonecnt != 3)) {
    101e:	dd c0       	rjmp	.+442    	; 0x11da <TickFct_Object+0x48c>
    1020:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	b0 f0       	brcs	.+44     	; 0x1054 <TickFct_Object+0x306>
    1028:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
				LCD_Cursor(cnt);
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 f0       	breq	.+36     	; 0x1054 <TickFct_Object+0x306>
    1030:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
				LCD_WriteData('_');
    1034:	f3 d8       	rcall	.-3610   	; 0x21c <LCD_Cursor>
    1036:	8f e5       	ldi	r24, 0x5F	; 95
    1038:	98 d8       	rcall	.-3792   	; 0x16a <LCD_WriteData>
				cnt--;
    103a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
				objectposition = cnt;
    1044:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
    1048:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <objectposition>
				object1Flag = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <object1Flag>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <TickFct_Object+0x32e>
			}
			else if ((cnt <= 1) && (obstacle1gonecnt != 3)) {
    1054:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	80 f4       	brcc	.+32     	; 0x107c <TickFct_Object+0x32e>
    105c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
				cnt = 17;
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	61 f0       	breq	.+24     	; 0x107c <TickFct_Object+0x32e>
    1064:	81 e1       	ldi	r24, 0x11	; 17
				obstacle1gonecnt++;
    1066:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
    106a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_Cursor(1);
    1070:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <obstacle1gonecnt>
    1074:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData('_');
    1076:	d2 d8       	rcall	.-3676   	; 0x21c <LCD_Cursor>
    1078:	8f e5       	ldi	r24, 0x5F	; 95
			}

			if (tickcnt >= 14) {
    107a:	77 d8       	rcall	.-3858   	; 0x16a <LCD_WriteData>
    107c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
				if ((cnt8 > 1) && (obstacle3gonecnt != 3)) {
    1080:	8e 30       	cpi	r24, 0x0E	; 14
    1082:	70 f1       	brcs	.+92     	; 0x10e0 <TickFct_Object+0x392>
    1084:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	b0 f0       	brcs	.+44     	; 0x10b8 <TickFct_Object+0x36a>
    108c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
					LCD_Cursor(cnt8);
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 f0       	breq	.+36     	; 0x10b8 <TickFct_Object+0x36a>
    1094:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
					LCD_WriteData('_');
    1098:	c1 d8       	rcall	.-3710   	; 0x21c <LCD_Cursor>
    109a:	8f e5       	ldi	r24, 0x5F	; 95
    109c:	66 d8       	rcall	.-3892   	; 0x16a <LCD_WriteData>
					cnt8--;
    109e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <cnt8>
					object3position = cnt8;
    10a8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
    10ac:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <object3position>
					object3Flag = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <object3Flag>
				}
				else if((cnt8 <= 1) && (obstacle3gonecnt != 3)) {
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <TickFct_Object+0x392>
    10b8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <cnt8>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	80 f4       	brcc	.+32     	; 0x10e0 <TickFct_Object+0x392>
    10c0:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
					cnt8 = 17;
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <TickFct_Object+0x392>
    10c8:	81 e1       	ldi	r24, 0x11	; 17
					obstacle3gonecnt++;
    10ca:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <cnt8>
    10ce:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
					LCD_Cursor(1);
    10d4:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <obstacle3gonecnt>
					LCD_WriteData('_');
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	a0 d8       	rcall	.-3776   	; 0x21c <LCD_Cursor>
    10dc:	8f e5       	ldi	r24, 0x5F	; 95
				}
			}

			if (tickcnt >= 6) {
    10de:	45 d8       	rcall	.-3958   	; 0x16a <LCD_WriteData>
    10e0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
    10e4:	86 30       	cpi	r24, 0x06	; 6
				if ((cnt3 > 17) && (obstacle6gonecnt != 2)) {
    10e6:	70 f1       	brcs	.+92     	; 0x1144 <TickFct_Object+0x3f6>
    10e8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
    10ec:	82 31       	cpi	r24, 0x12	; 18
    10ee:	b0 f0       	brcs	.+44     	; 0x111c <TickFct_Object+0x3ce>
    10f0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <obstacle6gonecnt>
    10f4:	82 30       	cpi	r24, 0x02	; 2
					LCD_Cursor(cnt3);
    10f6:	91 f0       	breq	.+36     	; 0x111c <TickFct_Object+0x3ce>
    10f8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
    10fc:	8f d8       	rcall	.-3810   	; 0x21c <LCD_Cursor>
					LCD_WriteData('_');
    10fe:	8f e5       	ldi	r24, 0x5F	; 95
    1100:	34 d8       	rcall	.-3992   	; 0x16a <LCD_WriteData>
    1102:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
					cnt3--;
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
    110c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cnt3>
					object6position = cnt3;
    1110:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <object6position>
    1114:	81 e0       	ldi	r24, 0x01	; 1
					object6Flag = 1;
    1116:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <object6Flag>
				}
				else if ((cnt <= 17) && (obstacle6gonecnt != 2)) {
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <TickFct_Object+0x3f6>
    111c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <cnt>
    1120:	82 31       	cpi	r24, 0x12	; 18
    1122:	80 f4       	brcc	.+32     	; 0x1144 <TickFct_Object+0x3f6>
    1124:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <obstacle6gonecnt>
    1128:	82 30       	cpi	r24, 0x02	; 2
					cnt3 = 33;
    112a:	61 f0       	breq	.+24     	; 0x1144 <TickFct_Object+0x3f6>
    112c:	81 e2       	ldi	r24, 0x21	; 33
    112e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
					obstacle6gonecnt++;
    1132:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <obstacle6gonecnt>
					LCD_Cursor(17);
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <obstacle6gonecnt>
					LCD_WriteData('_');
    113c:	81 e1       	ldi	r24, 0x11	; 17
    113e:	6e d8       	rcall	.-3876   	; 0x21c <LCD_Cursor>
    1140:	8f e5       	ldi	r24, 0x5F	; 95
				}
			}

			if (tickcnt >= 28) {
    1142:	13 d8       	rcall	.-4058   	; 0x16a <LCD_WriteData>
    1144:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
    1148:	8c 31       	cpi	r24, 0x1C	; 28
				if ((cnt4 > 17) && (obstacle4gonecnt != 2)) {
    114a:	78 f1       	brcs	.+94     	; 0x11aa <TickFct_Object+0x45c>
    114c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
    1150:	82 31       	cpi	r24, 0x12	; 18
    1152:	b0 f0       	brcs	.+44     	; 0x1180 <TickFct_Object+0x432>
    1154:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    1158:	82 30       	cpi	r24, 0x02	; 2
					LCD_Cursor(cnt4);
    115a:	91 f0       	breq	.+36     	; 0x1180 <TickFct_Object+0x432>
    115c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
    1160:	5d d8       	rcall	.-3910   	; 0x21c <LCD_Cursor>
					LCD_WriteData('_');
    1162:	8f e5       	ldi	r24, 0x5F	; 95
    1164:	02 d8       	rcall	.-4092   	; 0x16a <LCD_WriteData>
    1166:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
					cnt4--;
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
					object4position = cnt4;
    1170:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
    1174:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <object4position>
					object4Flag = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <object4Flag>
    117e:	15 c0       	rjmp	.+42     	; 0x11aa <TickFct_Object+0x45c>
				}
				else if ((cnt4 <= 17) && (obstacle4gonecnt != 2)) {
    1180:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cnt4>
    1184:	82 31       	cpi	r24, 0x12	; 18
    1186:	88 f4       	brcc	.+34     	; 0x11aa <TickFct_Object+0x45c>
    1188:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	69 f0       	breq	.+26     	; 0x11aa <TickFct_Object+0x45c>
					cnt4 = 33;
    1190:	81 e2       	ldi	r24, 0x21	; 33
    1192:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
					obstacle4gonecnt++;
    1196:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    119a:	8f 5f       	subi	r24, 0xFF	; 255
    119c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <obstacle4gonecnt>
					LCD_Cursor(17);
    11a0:	81 e1       	ldi	r24, 0x11	; 17
    11a2:	3c d8       	rcall	.-3976   	; 0x21c <LCD_Cursor>
    11a4:	8f e5       	ldi	r24, 0x5F	; 95
					LCD_WriteData('_');
    11a6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_WriteData>
    11aa:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
				}
			}

			if (obstacle1gonecnt == 3) object1Flag = 0;
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <TickFct_Object+0x468>
    11b2:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <object1Flag>
    11b6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
			if (obstacle3gonecnt == 3) object3Flag = 0;
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <TickFct_Object+0x474>
    11be:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <object3Flag>
    11c2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <obstacle6gonecnt>
			if (obstacle6gonecnt == 2) object6Flag = 0;
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	11 f4       	brne	.+4      	; 0x11ce <TickFct_Object+0x480>
    11ca:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <object6Flag>
    11ce:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
			if (obstacle4gonecnt == 2) object4Flag = 0;
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	11 f4       	brne	.+4      	; 0x11da <TickFct_Object+0x48c>
    11d6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <object4Flag>
    11da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <level1Flag>
		}

		if (level1Flag && (obstacle1gonecnt + obstacle2gonecnt == 6)){
    11de:	88 23       	and	r24, r24
    11e0:	e9 f0       	breq	.+58     	; 0x121c <TickFct_Object+0x4ce>
    11e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	82 0f       	add	r24, r18
    11f4:	93 1f       	adc	r25, r19
    11f6:	06 97       	sbiw	r24, 0x06	; 6
    11f8:	89 f4       	brne	.+34     	; 0x121c <TickFct_Object+0x4ce>
    11fa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <level1Flag>
			level1Flag = 0;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
			level2Flag = 1;
    1200:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <level2Flag>
    1204:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <obstacle1gonecnt>
			obstacle1gonecnt = 0;
    1208:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <obstacle2gonecnt>
			obstacle2gonecnt = 0;
    120c:	81 e1       	ldi	r24, 0x11	; 17
			cnt = 17;
    120e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
    1212:	81 e2       	ldi	r24, 0x21	; 33
			cnt3 = 33;
    1214:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
    1218:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <tickcnt>
			tickcnt = 0;
    121c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <level2Flag>
		}

		if (level2Flag && (obstacle2gonecnt + obstacle1gonecnt + obstacle3gonecnt + obstacle4gonecnt == 10)) {
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <TickFct_Object+0x4d8>
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <TickFct_Object+0x556>
    1226:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <obstacle2gonecnt>
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	28 0f       	add	r18, r24
    1238:	39 1f       	adc	r19, r25
    123a:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	28 0f       	add	r18, r24
    1244:	39 1f       	adc	r19, r25
    1246:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	0a 97       	sbiw	r24, 0x0a	; 10
    1254:	39 f5       	brne	.+78     	; 0x12a4 <TickFct_Object+0x556>
    1256:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <level2Flag>
			level2Flag = 0;
    125a:	81 e0       	ldi	r24, 0x01	; 1
			level3Flag = 1;
    125c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <level3Flag>
    1260:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <obstacle2gonecnt>
			obstacle2gonecnt = 0;
    1264:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <obstacle1gonecnt>
			obstacle1gonecnt = 0;
    1268:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <obstacle3gonecnt>
			obstacle3gonecnt = 0;
    126c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <obstacle4gonecnt>
			obstacle4gonecnt = 0;
    1270:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(1);
    1272:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Cursor>
    1276:	8f e5       	ldi	r24, 0x5F	; 95
			LCD_WriteData('_');
    1278:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_WriteData>
    127c:	81 e1       	ldi	r24, 0x11	; 17
			LCD_Cursor(17);
    127e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Cursor>
    1282:	8f e5       	ldi	r24, 0x5F	; 95
			LCD_WriteData('_');
    1284:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_WriteData>
    1288:	81 e1       	ldi	r24, 0x11	; 17
			cnt = 17;
    128a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
    128e:	81 e1       	ldi	r24, 0x11	; 17
			cnt2 = 17;
    1290:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <cnt2>
    1294:	81 e2       	ldi	r24, 0x21	; 33
			cnt3 = 33;
    1296:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
    129a:	81 e2       	ldi	r24, 0x21	; 33
			cnt4 = 33;
    129c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
    12a0:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <tickcnt>
			tickcnt = 0;
    12a4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <level3Flag>
		}

		if ((level3Flag) && ((obstacle1gonecnt + obstacle3gonecnt + obstacle6gonecnt + obstacle4gonecnt) == 10)) {
    12a8:	88 23       	and	r24, r24
    12aa:	99 f1       	breq	.+102    	; 0x1312 <TickFct_Object+0x5c4>
    12ac:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <obstacle1gonecnt>
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <obstacle3gonecnt>
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	28 0f       	add	r18, r24
    12be:	39 1f       	adc	r19, r25
    12c0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <obstacle6gonecnt>
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	28 0f       	add	r18, r24
    12ca:	39 1f       	adc	r19, r25
    12cc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <obstacle4gonecnt>
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	0a 97       	sbiw	r24, 0x0a	; 10
    12da:	d9 f4       	brne	.+54     	; 0x1312 <TickFct_Object+0x5c4>
    12dc:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <level3Flag>
			level3Flag = 0;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
			level1Flag = 1;
    12e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <level1Flag>
    12e6:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <obstacle1gonecnt>
			obstacle1gonecnt = 0;
    12ea:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <obstacle3gonecnt>
			obstacle3gonecnt = 0;
    12ee:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <obstacle6gonecnt>
			obstacle6gonecnt = 0;
    12f2:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <obstacle4gonecnt>
			obstacle4gonecnt = 0;
    12f6:	81 e1       	ldi	r24, 0x11	; 17
			cnt8 = 17;
    12f8:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <cnt8>
    12fc:	81 e1       	ldi	r24, 0x11	; 17
			cnt = 17;
    12fe:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <cnt>
    1302:	81 e2       	ldi	r24, 0x21	; 33
			cnt3 = 33;
    1304:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <cnt3>
    1308:	81 e2       	ldi	r24, 0x21	; 33
			cnt4 = 33;
    130a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cnt4>
    130e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <tickcnt>
			tickcnt = 0;
    1312:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <tickcnt>
		}

		tickcnt++;
    1316:	8f 5f       	subi	r24, 0xFF	; 255
    1318:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <tickcnt>
    131c:	00 00       	nop
		break;
    131e:	00 00       	nop
	}
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <TickFct_HitDetect>:
    1326:	cf 93       	push	r28

void TickFct_HitDetect()
{
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	
	switch(hit_state){
    132e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <hit_state>
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <TickFct_HitDetect+0x36>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	91 05       	cpc	r25, r1
    1340:	01 f1       	breq	.+64     	; 0x1382 <TickFct_HitDetect+0x5c>
    1342:	89 2b       	or	r24, r25
    1344:	41 f5       	brne	.+80     	; 0x1396 <TickFct_HitDetect+0x70>
		case HitStart :
		if (StartFlag) hit_state = CalculatingHitDetect;
    1346:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
    134a:	88 23       	and	r24, r24
    134c:	21 f0       	breq	.+8      	; 0x1356 <TickFct_HitDetect+0x30>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <hit_state>
		else hit_state = HitStart;
		break;
    1354:	23 c0       	rjmp	.+70     	; 0x139c <TickFct_HitDetect+0x76>
{
	
	switch(hit_state){
		case HitStart :
		if (StartFlag) hit_state = CalculatingHitDetect;
		else hit_state = HitStart;
    1356:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <hit_state>
		break;
    135a:	20 c0       	rjmp	.+64     	; 0x139c <TickFct_HitDetect+0x76>
		
		case CalculatingHitDetect :
		if (!StartFlag) {
    135c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
    1360:	88 23       	and	r24, r24
    1362:	19 f4       	brne	.+6      	; 0x136a <TickFct_HitDetect+0x44>
			hit_state = HitStart;
    1364:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <hit_state>
		}
		else if (HitFlag){
			hit_state = Stop;
		}
		else hit_state = CalculatingHitDetect;
		break;
    1368:	19 c0       	rjmp	.+50     	; 0x139c <TickFct_HitDetect+0x76>
		
		case CalculatingHitDetect :
		if (!StartFlag) {
			hit_state = HitStart;
		}
		else if (HitFlag){
    136a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <HitFlag>
    136e:	88 23       	and	r24, r24
    1370:	21 f0       	breq	.+8      	; 0x137a <TickFct_HitDetect+0x54>
			hit_state = Stop;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <hit_state>
		}
		else hit_state = CalculatingHitDetect;
		break;
    1378:	11 c0       	rjmp	.+34     	; 0x139c <TickFct_HitDetect+0x76>
			hit_state = HitStart;
		}
		else if (HitFlag){
			hit_state = Stop;
		}
		else hit_state = CalculatingHitDetect;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <hit_state>
		break;
    1380:	0d c0       	rjmp	.+26     	; 0x139c <TickFct_HitDetect+0x76>
		
		case Stop :
		if (StartFlag) hit_state = Stop;
    1382:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <StartFlag>
    1386:	88 23       	and	r24, r24
    1388:	21 f0       	breq	.+8      	; 0x1392 <TickFct_HitDetect+0x6c>
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <hit_state>
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <TickFct_HitDetect+0x70>
		else hit_state = HitStart;
    1392:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <hit_state>
		
		default :
		hit_state = HitStart;
    1396:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <hit_state>
		break;
    139a:	00 00       	nop
	}
	
	switch(hit_state){
    139c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <hit_state>
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	19 f0       	breq	.+6      	; 0x13ae <TickFct_HitDetect+0x88>
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <TickFct_HitDetect+0x8e>
		if (object7Flag && (playerposition == object7position)) HitFlag = 1;
		if (object8Flag && (playerposition == object8position)) HitFlag = 1;
		break;
	}
	
}
    13ac:	6c c0       	rjmp	.+216    	; 0x1486 <TickFct_HitDetect+0x160>
		break;
	}
	
	switch(hit_state){
		case HitStart :
		HitFlag = 0;
    13ae:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <HitFlag>
		break;
    13b2:	69 c0       	rjmp	.+210    	; 0x1486 <TickFct_HitDetect+0x160>
		
		case CalculatingHitDetect :
		if (object1Flag && (playerposition == objectposition)) HitFlag = 1;
    13b4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <object1Flag>
    13b8:	88 23       	and	r24, r24
    13ba:	49 f0       	breq	.+18     	; 0x13ce <TickFct_HitDetect+0xa8>
    13bc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    13c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <objectposition>
    13c4:	98 17       	cp	r25, r24
    13c6:	19 f4       	brne	.+6      	; 0x13ce <TickFct_HitDetect+0xa8>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object2Flag && (playerposition == object2position)) HitFlag = 1;
    13ce:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <object2Flag>
    13d2:	88 23       	and	r24, r24
    13d4:	49 f0       	breq	.+18     	; 0x13e8 <TickFct_HitDetect+0xc2>
    13d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    13da:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <object2position>
    13de:	98 17       	cp	r25, r24
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <TickFct_HitDetect+0xc2>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object3Flag && (playerposition == object3position)) HitFlag = 1;
    13e8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <object3Flag>
    13ec:	88 23       	and	r24, r24
    13ee:	49 f0       	breq	.+18     	; 0x1402 <TickFct_HitDetect+0xdc>
    13f0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    13f4:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <object3position>
    13f8:	98 17       	cp	r25, r24
    13fa:	19 f4       	brne	.+6      	; 0x1402 <TickFct_HitDetect+0xdc>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object4Flag && (playerposition == object4position)) HitFlag = 1;
    1402:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <object4Flag>
    1406:	88 23       	and	r24, r24
    1408:	49 f0       	breq	.+18     	; 0x141c <TickFct_HitDetect+0xf6>
    140a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    140e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <object4position>
    1412:	98 17       	cp	r25, r24
    1414:	19 f4       	brne	.+6      	; 0x141c <TickFct_HitDetect+0xf6>
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object5Flag && (playerposition == object5position)) HitFlag = 1;
    141c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <object5Flag>
    1420:	88 23       	and	r24, r24
    1422:	49 f0       	breq	.+18     	; 0x1436 <TickFct_HitDetect+0x110>
    1424:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    1428:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <object5position>
    142c:	98 17       	cp	r25, r24
    142e:	19 f4       	brne	.+6      	; 0x1436 <TickFct_HitDetect+0x110>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object6Flag && (playerposition == object6position)) HitFlag = 1;
    1436:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <object6Flag>
    143a:	88 23       	and	r24, r24
    143c:	49 f0       	breq	.+18     	; 0x1450 <TickFct_HitDetect+0x12a>
    143e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    1442:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <object6position>
    1446:	98 17       	cp	r25, r24
    1448:	19 f4       	brne	.+6      	; 0x1450 <TickFct_HitDetect+0x12a>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object7Flag && (playerposition == object7position)) HitFlag = 1;
    1450:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <object7Flag>
    1454:	88 23       	and	r24, r24
    1456:	49 f0       	breq	.+18     	; 0x146a <TickFct_HitDetect+0x144>
    1458:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    145c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <object7position>
    1460:	98 17       	cp	r25, r24
    1462:	19 f4       	brne	.+6      	; 0x146a <TickFct_HitDetect+0x144>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		if (object8Flag && (playerposition == object8position)) HitFlag = 1;
    146a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <object8Flag>
    146e:	88 23       	and	r24, r24
    1470:	49 f0       	breq	.+18     	; 0x1484 <TickFct_HitDetect+0x15e>
    1472:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <playerposition>
    1476:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <object8position>
    147a:	98 17       	cp	r25, r24
    147c:	19 f4       	brne	.+6      	; 0x1484 <TickFct_HitDetect+0x15e>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <HitFlag>
		break;
    1484:	00 00       	nop
	}
	
}
    1486:	00 00       	nop
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <main>:


int main (void)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xFF; PORTD = 0x00;
    1496:	8a e2       	ldi	r24, 0x2A	; 42
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
    14a0:	8b e2       	ldi	r24, 0x2B	; 43
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	fc 01       	movw	r30, r24
    14a6:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
    14a8:	87 e2       	ldi	r24, 0x27	; 39
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	2f ef       	ldi	r18, 0xFF	; 255
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
    14b2:	88 e2       	ldi	r24, 0x28	; 40
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	fc 01       	movw	r30, r24
    14b8:	10 82       	st	Z, r1
	DDRA = 0x00; PORTA = 0xFF;
    14ba:	81 e2       	ldi	r24, 0x21	; 33
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	10 82       	st	Z, r1
    14c2:	82 e2       	ldi	r24, 0x22	; 34
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
	
	
	TimerSet(150);
    14cc:	66 e9       	ldi	r22, 0x96	; 150
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <TimerSet>
	TimerOn();
    14d8:	0e 94 81 01 	call	0x302	; 0x302 <TimerOn>
	
	LCD_init();
    14dc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_init>
	LCD_WriteCommand(0x0C);
    14e0:	8c e0       	ldi	r24, 0x0C	; 12
    14e2:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_WriteCommand>
	CreateCustomChar(CustomCharPlayer, 1);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	89 e2       	ldi	r24, 0x29	; 41
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharRock, 2);
    14f0:	62 e0       	ldi	r22, 0x02	; 2
    14f2:	89 e3       	ldi	r24, 0x39	; 57
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharEnemy, 3);
    14fa:	63 e0       	ldi	r22, 0x03	; 3
    14fc:	81 e3       	ldi	r24, 0x31	; 49
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharLeftFlag, 4);
    1504:	64 e0       	ldi	r22, 0x04	; 4
    1506:	89 e0       	ldi	r24, 0x09	; 9
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharRightFlag, 5);
    150e:	65 e0       	ldi	r22, 0x05	; 5
    1510:	81 e1       	ldi	r24, 0x11	; 17
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharTree, 6);
    1518:	66 e0       	ldi	r22, 0x06	; 6
    151a:	81 e2       	ldi	r24, 0x21	; 33
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	CreateCustomChar(CustomCharSadFace, 7);
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	89 e1       	ldi	r24, 0x19	; 25
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 24 02 	call	0x448	; 0x448 <CreateCustomChar>
	LCD_WriteCommand(0x80);
    152c:	80 e8       	ldi	r24, 0x80	; 128
    152e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_WriteCommand>
	
	ADC_init();
    1532:	1c d8       	rcall	.-4040   	; 0x56c <ADC_init>
	
	testoutput_state = Start;
    1534:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <testoutput_state>
	position_state = PosStart;
    1538:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <position_state>
	obj_state = ObjStart;
    153c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <obj_state>
	hit_state = HitStart;
    1540:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <hit_state>
	score_state = ScoreStart;
    1544:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <score_state>
	
	while(1){
		x = ADC;
    1548:	88 e7       	ldi	r24, 0x78	; 120
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	fc 01       	movw	r30, r24
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <x+0x1>
    1556:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <x>
		TickFct_Object();
    155a:	f9 db       	rcall	.-2062   	; 0xd4e <TickFct_Object>
		TickFct_TestOutput();
    155c:	8b d8       	rcall	.-3818   	; 0x674 <TickFct_TestOutput>
		TickFct_Position();
    155e:	a5 db       	rcall	.-2230   	; 0xcaa <TickFct_Position>
    1560:	e2 de       	rcall	.-572    	; 0x1326 <TickFct_HitDetect>
		TickFct_HitDetect();
    1562:	15 d8       	rcall	.-4054   	; 0x58e <TickFct_Scoring>
    1564:	00 00       	nop
		TickFct_Scoring();
    1566:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
		while(!TimerFlag){}
    156a:	88 23       	and	r24, r24
    156c:	e1 f3       	breq	.-8      	; 0x1566 <main+0xd8>
    156e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
    1572:	ea cf       	rjmp	.-44     	; 0x1548 <main+0xba>

00001574 <_exit>:
		TimerFlag = 0;
    1574:	f8 94       	cli

00001576 <__stop_program>:
    1576:	ff cf       	rjmp	.-2      	; 0x1576 <__stop_program>
